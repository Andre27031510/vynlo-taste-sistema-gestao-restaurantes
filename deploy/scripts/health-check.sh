#!/bin/bash

# Vynlo Taste - Health Check de Produ√ß√£o
set -e

# Configura√ß√µes
ENVIRONMENT="prod"
REGION="us-east-1"
STACK_NAME="vynlo-taste-${ENVIRONMENT}"

echo "üè• HEALTH CHECK - VYNLO TASTE PRODU√á√ÉO"
echo "======================================"

# Obter URLs da infraestrutura
ALB_DNS=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --query 'Stacks[0].Outputs[?OutputKey==`ALBDNSName`].OutputValue' \
    --output text \
    --region $REGION)

CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
    --output text \
    --region $REGION)

echo "üîç Testando componentes do sistema..."
echo ""

# 1. Health Check da API
echo "1. üîß API Health Check"
echo "====================="
API_URL="http://$ALB_DNS/api/v1/health"
echo "URL: $API_URL"

if curl -f -s --max-time 10 "$API_URL" > /dev/null; then
    echo "‚úÖ API est√° respondendo"
    
    # Verificar response time
    RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$API_URL")
    echo "‚è±Ô∏è  Response time: ${RESPONSE_TIME}s"
    
    if (( $(echo "$RESPONSE_TIME < 1.0" | bc -l) )); then
        echo "‚úÖ Response time OK"
    else
        echo "‚ö†Ô∏è  Response time alto"
    fi
else
    echo "‚ùå API n√£o est√° respondendo"
    exit 1
fi

echo ""

# 2. Health Check do Frontend
echo "2. üé® Frontend Health Check"
echo "=========================="
FRONTEND_URL="https://$CLOUDFRONT_URL"
echo "URL: $FRONTEND_URL"

if curl -f -s --max-time 10 "$FRONTEND_URL" > /dev/null; then
    echo "‚úÖ Frontend est√° acess√≠vel"
    
    # Verificar response time
    RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$FRONTEND_URL")
    echo "‚è±Ô∏è  Response time: ${RESPONSE_TIME}s"
    
    if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
        echo "‚úÖ Response time OK"
    else
        echo "‚ö†Ô∏è  Response time alto"
    fi
else
    echo "‚ùå Frontend n√£o est√° acess√≠vel"
    exit 1
fi

echo ""

# 3. Database Health Check
echo "3. üóÑÔ∏è Database Health Check"
echo "=========================="

DB_ENDPOINT=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --query 'Stacks[0].Outputs[?OutputKey==`DatabaseEndpoint`].OutputValue' \
    --output text \
    --region $REGION)

echo "Endpoint: $DB_ENDPOINT"

# Verificar se o endpoint est√° resolvendo
if nslookup "$DB_ENDPOINT" > /dev/null 2>&1; then
    echo "‚úÖ Database endpoint est√° resolvendo"
else
    echo "‚ùå Database endpoint n√£o est√° resolvendo"
    exit 1
fi

# Verificar conex√£o (precisa de psql instalado)
if command -v psql &> /dev/null; then
    DB_PASSWORD=$(aws secretsmanager get-secret-value \
        --secret-id vynlo-taste-db-password-prod \
        --query SecretString \
        --output text \
        --region $REGION | jq -r .password)
    
    if PGPASSWORD="$DB_PASSWORD" psql -h "$DB_ENDPOINT" -U vynlo_user -d vynlo_taste -c "SELECT 1;" > /dev/null 2>&1; then
        echo "‚úÖ Database est√° aceitando conex√µes"
    else
        echo "‚ö†Ô∏è  Database n√£o est√° aceitando conex√µes"
    fi
else
    echo "‚ö†Ô∏è  psql n√£o instalado - pulando teste de conex√£o"
fi

echo ""

# 4. Redis Health Check
echo "4. üîÑ Redis Health Check"
echo "======================="

REDIS_ENDPOINT=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --query 'Stacks[0].Outputs[?OutputKey==`RedisEndpoint`].OutputValue' \
    --output text \
    --region $REGION)

echo "Endpoint: $REDIS_ENDPOINT"

if nslookup "$REDIS_ENDPOINT" > /dev/null 2>&1; then
    echo "‚úÖ Redis endpoint est√° resolvendo"
else
    echo "‚ùå Redis endpoint n√£o est√° resolvendo"
    exit 1
fi

echo ""

# 5. Load Balancer Health Check
echo "5. ‚öñÔ∏è Load Balancer Health Check"
echo "==============================="

ALB_ARN=$(aws elbv2 describe-load-balancers \
    --names "vynlo-taste-alb-${ENVIRONMENT}" \
    --query 'LoadBalancers[0].LoadBalancerArn' \
    --output text \
    --region $REGION)

if [ "$ALB_ARN" != "None" ]; then
    echo "‚úÖ Load Balancer encontrado"
    
    # Verificar targets saud√°veis
    TARGET_GROUPS=$(aws elbv2 describe-target-groups \
        --load-balancer-arn "$ALB_ARN" \
        --query 'TargetGroups[0].TargetGroupArn' \
        --output text \
        --region $REGION)
    
    if [ "$TARGET_GROUPS" != "None" ]; then
        HEALTHY_TARGETS=$(aws elbv2 describe-target-health \
            --target-group-arn "$TARGET_GROUPS" \
            --query 'length(TargetHealthDescriptions[?TargetHealth.State==`healthy`])' \
            --output text \
            --region $REGION)
        
        echo "üéØ Targets saud√°veis: $HEALTHY_TARGETS"
        
        if [ "$HEALTHY_TARGETS" -gt 0 ]; then
            echo "‚úÖ Pelo menos um target est√° saud√°vel"
        else
            echo "‚ö†Ô∏è  Nenhum target est√° saud√°vel"
        fi
    fi
else
    echo "‚ùå Load Balancer n√£o encontrado"
    exit 1
fi

echo ""

# 6. CloudWatch Metrics Check
echo "6. üìä CloudWatch Metrics Check"
echo "=============================="

# Verificar se h√° m√©tricas recentes
RECENT_REQUESTS=$(aws cloudwatch get-metric-statistics \
    --namespace AWS/ApplicationELB \
    --metric-name RequestCount \
    --dimensions Name=LoadBalancer,Value="app/vynlo-taste-alb-${ENVIRONMENT}" \
    --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
    --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
    --period 300 \
    --statistics Sum \
    --query 'Datapoints[0].Sum' \
    --output text \
    --region $REGION)

if [ "$RECENT_REQUESTS" != "None" ] && [ "$RECENT_REQUESTS" != "" ]; then
    echo "‚úÖ M√©tricas sendo coletadas"
    echo "üìà Requisi√ß√µes nos √∫ltimos 5 min: $RECENT_REQUESTS"
else
    echo "‚ö†Ô∏è  Nenhuma m√©trica recente encontrada"
fi

echo ""

# 7. Resumo Final
echo "üìã RESUMO DO HEALTH CHECK"
echo "========================="
echo "‚úÖ API: Funcionando"
echo "‚úÖ Frontend: Funcionando"
echo "‚úÖ Database: Conect√°vel"
echo "‚úÖ Redis: Acess√≠vel"
echo "‚úÖ Load Balancer: Ativo"
echo "‚úÖ M√©tricas: Coletando"
echo ""
echo "üéâ SISTEMA EST√Å SAUD√ÅVEL!"
echo ""
echo "üåê URLs de Acesso:"
echo "Frontend: https://$CLOUDFRONT_URL"
echo "API: http://$ALB_DNS/api/v1"
echo "Health: http://$ALB_DNS/api/v1/health"
echo ""
echo "üìä Monitoramento:"
echo "CloudWatch: https://console.aws.amazon.com/cloudwatch/home?region=$REGION"
echo "Dashboard: https://console.aws.amazon.com/cloudwatch/home?region=$REGION#dashboards:name=vynlo-taste-dashboard-$ENVIRONMENT"